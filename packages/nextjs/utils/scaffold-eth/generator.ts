import { GenericContractsDeclaration } from "./types/generic";
import fs from "fs";
import path from "path";
import type { ScaffoldConfig } from "~~/scaffold.config";

export async function generateDeployedContractsTypes({
  deploymentsFolderPath,
  config,
  saveToFile = true,
}: {
  deploymentsFolderPath: string;
  config: ScaffoldConfig;
  saveToFile?: boolean;
}) {
  const contracts: GenericContractsDeclaration = {};

  for (const network of config.targetNetworks) {
    const chainId = network.id;
    const folder = path.join(deploymentsFolderPath, network.name);

    if (!fs.existsSync(folder)) continue;

    const files = fs.readdirSync(folder).filter(f => f.endsWith(".json") && f !== ".chainId");

    for (const file of files) {
      const filepath = path.join(folder, file);
      const data = JSON.parse(fs.readFileSync(filepath, "utf8"));

      if (!contracts[chainId]) contracts[chainId] = {};
      contracts[chainId][file.replace(".json", "")] = {
        address: data.address,
        abi: data.abi,
      };
    }
  }

  if (saveToFile) {
    const outputPath = path.join(__dirname, "../../contracts/deployedContracts.ts");
    const output = `/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = ${JSON.stringify(contracts, null, 2)} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
`;
    fs.writeFileSync(outputPath, output);
  }

  return contracts;
}
